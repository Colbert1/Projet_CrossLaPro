//---------------------------------------------------------------------------

#include <System.hpp>
#pragma hdrstop

#include <stdio.h>
#include <string>
#include <iostream>
#include "Unit3.h"
#include "Unit1.h"
#include "Unit2.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important : Les méthodes et les propriétés des objets de la VCL peuvent seulement être
//   utilisées dans une méthode appelée avec Synchronize, par exemple :
//
//      Synchronize(&UpdateCaption);
//
//   où UpdateCaption pourrait ressembler à :
//
//      void __fastcall ThreadDetectionDossard::UpdateCaption()
//      {
//        Form1->Caption = "Mis à jour dans un thread";
//      }
//---------------------------------------------------------------------------

__fastcall ThreadDetectionDossard::ThreadDetectionDossard(bool CreateSuspended)
	: TThread(CreateSuspended)
{
}
//---------------------------------------------------------------------------
void __fastcall ThreadDetectionDossard::Execute()
{
	//---- Placer le code du thread ici ----
	while(!TerminatedZ){
		int nb = 0, longueurBufferRecep = 23, n = 0;
		char bufferRecep[23], bufferRecepFinal[46], nombreDetection[2], idDossard[7], heureDetection[12];
		bool debutTrame, finTrame;
		debutTrame = false;
		finTrame = false;
		while(finTrame == false){
			Sleep(500);
			Form1->RS232->recep(bufferRecep,longueurBufferRecep);
			for(int i = 0; i < longueurBufferRecep; i++){
				if(bufferRecep[i] == 0x02 && finTrame == false && debutTrame == false){
					debutTrame = true;
					bufferRecepFinal[nb] = bufferRecep[i];
					nb++;
				}else if(debutTrame == true && finTrame == false && bufferRecepFinal[nb-1] == 0x02 && bufferRecep[i] != 0x30){
					debutTrame = false;
					nb -= 1;
				}else if(debutTrame == true && finTrame == false && bufferRecepFinal[nb-1] == 0x02 && bufferRecep[i] == 0x30){
					bufferRecepFinal[nb] = bufferRecep[i];
					nb++;
				}else if(debutTrame == true && finTrame == false && bufferRecepFinal[nb-2] == 0x02 && bufferRecepFinal[nb-1] == 0x30 && bufferRecep[i] != 0x30){
					debutTrame = false;
					nb -= 2;
				}else if(debutTrame == true && finTrame == false && bufferRecepFinal[nb-2] == 0x02 && bufferRecepFinal[nb-1] == 0x30 && bufferRecep[i] == 0x30){
					bufferRecepFinal[nb] = bufferRecep[i];
					nb++;
				}else if(debutTrame == true && finTrame == false && bufferRecepFinal[nb-2] != 0x02 && bufferRecepFinal[nb-1] != 0x30 && bufferRecepFinal[nb-1] != 0x02 && bufferRecep[i] != 0x0D){
					bufferRecepFinal[nb] = bufferRecep[i];
					nb++;
				}else if(debutTrame == true && bufferRecep[i] == 0x0D){
					bufferRecepFinal[nb] = bufferRecep[i];
					nb++;
					finTrame = true;
				}else if(debutTrame == true && finTrame == false){
					if(bufferRecep[i] == 0x31 && bufferRecep[i-1] == 0x32 && nb == 13){
						bufferRecepFinal[nb] = bufferRecep[i];
						nb++;
					} else if(nb == 13 && bufferRecep[i] != 0x31 && bufferRecep[i-1] != 0x32){
						nb -= 13;
					} else {
						bufferRecepFinal[nb] = bufferRecep[i];
						nb++;
					}
				}
			}
		}
		if(finTrame == true){
			snprintf(nombreDetection,2,"%c%c",bufferRecepFinal[8],bufferRecepFinal[9]);
			snprintf(idDossard,6,"%c%c%c%c%c%c",bufferRecepFinal[27],bufferRecepFinal[28],bufferRecepFinal[29],bufferRecepFinal[30],bufferRecepFinal[31],bufferRecepFinal[32]);
			snprintf(heureDetection,11,"%c%c%c%c%c%c%c%c%c%c%c",bufferRecepFinal[34],bufferRecepFinal[35],bufferRecepFinal[36],bufferRecepFinal[37],bufferRecepFinal[38],bufferRecepFinal[39],bufferRecepFinal[40],bufferRecepFinal[41],bufferRecepFinal[42],bufferRecepFinal[43],bufferRecepFinal[44]);

			std::string nbDetectionS(nombreDetection);
			Form1->Label12->Caption = nbDetectionS.c_str();
			std::string idDossardS(idDossard);
			Form1->Label8->Caption = idDossardS.c_str();
			std::string heureDetectionS(heureDetection);
			Form1->Label10->Caption = heureDetectionS.c_str();
		}
	}
}
//---------------------------------------------------------------------------
